<!-- 

   Welcome to the PushButton Engine Ant build file.
   
   If you are building your own application you probably just need the SWC
   or else you need to copy the src/ folder's contents into your project.
   
   If you are a more advanced user or a PBEngine SDK developer, then this file
   will be of interest to you. :)
   
   This file is based on the PaperVision3D Ant build file, subsequently modified
   to fit PBEngine.
   
   How to use the build.properties file:

    Your checkout should include a build.template.properties file. This is where
    variables that change from system to system are stored. Simply rename the file
    to build.properties and place it in the same directory as your build.xml. When 
    you run the build.xml it will automatically import the build.properties file.

    Make sure you change the path of the Flex SDK and if you are on a PC you will need
    to add ".exe" to the asdoc.exe and compc.exe properties.
    
    NOTE: There is a bug with the 3.4.0 SDK that ships with the Flash Builder 4 Beta.
    Basically ASDoc doesn't work in our situation. Use the release version of the SDK 
    or the 4.0 version and the build will work.
    http://bugs.adobe.com/jira/browse/SDK-20449
    
-->
<project name="PBEngineSDK" default="compile" basedir=".">
   <dirname property="buildFilesDir" file="${ant.file.PBEngineSDK}" />
   <dirname property="rootDir" file="${buildFilesDir}" />
   
   <!-- import our build properties file -->
   <property file="${buildFilesDir}/build.properties" />

   <!-- Build settings -->
   <property name="DEBUG" value="true"/>
   
   <!-- Docs appearance settings. -->
   <property name="windowtitle" value="PushButton API Reference" />
   <property name="maintitle" value="PushButton API Reference" />
   <property name="footer" value="http://pushbuttonengine.com/" />

   <!-- Paths for the PBEngine SDK. -->
   <property name="bindir" value="${rootDir}/bin" />
   <property name="classesdir" value="${rootDir}/src" />
   <property name="docsdir" value="${rootDir}/docs/api" />
   <property name="testsdir" value="${rootDir}/test" />
   <property name="testRunDir" value="${buildFilesDir}/testrun"></property>

   <!-- Infer the binary extensions. -->
   <condition property="binaryExtension" value=".exe" else="">
      <or>
         <os family="windows"/>
         <os family="win9x"/>
         <os family="dos"/>
      </or>
   </condition>

   <!-- Paths for the Flex SDK. -->
   <property name="flexbindir" value="${flexdir}/bin" />
   <property name="flexlibsdir" value="${flexdir}/frameworks/libs" />
   <property name="asdoc" value="${flexbindir}/asdoc${binaryExtension}" />
   <property name="compc" value="${flexbindir}/compc${binaryExtension}" />
   <property name="mxmlc" value="${flexbindir}/mxmlc${binaryExtension}" />
   <property name="adl" value="${flexbindir}/adl${binaryExtension}" />
   
   <property environment="env" />

   <!-- Local classpath useed for custom tasks -->
   <path id="localClasspath">
      <fileset dir="${buildFilesDir}">
         <include name="**/*.jar"/>
      </fileset>
   </path>

   <target name="ensureValidEnvironment">
      <condition property="buildPropertiesIsValid">
         <or>
			<available file="${buildFilesDir}/build.properties"/>
			<!-- We -DbuildSystem=1 if we are doing an automated build -->
			<isset property="buildSystem"/>
	     </or>
      </condition>
      <fail unless="buildPropertiesIsValid">
         No ${buildFilesDir}/build.properties file is present!
         
         Copy build/build.template.properties to build/build.properties and
         set the values in it appropriate to your build environment.
      </fail>
      <condition property="flexSdkIsValid"> 
         <and> 
           <isset property="flexdir"/> 
           <available file="${flexdir}"/> 
         </and> 
      </condition>
      <fail unless="flexSdkIsValid">Either flexdir is not set, or it points to an absent directory.
      
         flexdir appears to be set to: '${flexdir}'
    
         Set the flexdir parameter by editing the build.properties file.
      </fail>
   </target>
   
   <target name="checkBuildServer" description="Checks if this is the build server">
      <condition property="isBuildServer" value="false">
         <and>
            <isset property="env.SVN_REVISION"/>
            <isset property="env.BUILD_NUMBER"/>
         </and>
      </condition>
   </target>
   
   <target name="populateBuildVersion" description="Creates an updated BuildVersion.as" 
      depends="checkBuildServer" if="isBuildServer">
      
      <echo>Revision Number: ${env.SVN_REVISION}</echo>
      <echo>Build Number: ${env.BUILD_NUMBER}</echo>
      
      <copy file="${classesdir}/com/pblabs/engine/version/BuildVersion.as.templ"
         tofile="${classesdir}/com/pblabs/engine/version/BuildVersion.as" overwrite="true" />
         
      <replace file="${classesdir}/com/pblabs/engine/version/BuildVersion.as"
         token="@buildNumber@" value="r${env.SVN_REVISION} (ZaaBot build #${env.BUILD_NUMBER})" />
   </target>

   <target name="compile" description="Creates SWC and API docs." unless="isUpToDate" depends="printUpToDate,ensureValidEnvironment">
      <antcall target="generateSWC" />
      <antcall target="generateDocs" />
   </target>
   
   <target name="clean" description="Delete build artifacts." depends="cleanDocs">
      <delete file="${bindir}/PBEngine.swc"/>
   </target>

   <target name="identifyClasses" description="Generates list of classes that will be compiled." depends="ensureValidEnvironment">
      <path id="path.source">
         <fileset dir="${classesdir}" includes="**/*.as,**/*.mxml"/>
      </path>
      <pathconvert property="path.classes" refid="path.source" pathsep=" ">
         <chainedmapper>
            <globmapper from="${classesdir}/*" to="*" casesensitive="false" handledirsep="true"/>
            <mapper type="regexp" from="^com[/\\]pblabs(.*)\.((mxml)|(as))" to="com\\pblabs\1"/>
            <mapper type="package" from="*" to="*"/>
         </chainedmapper>
      </pathconvert>
   </target>

   <target name="cleanDocs" description="Clean the documentation directory.">
      <echo>Cleaning out docs from '${docsdir}'...</echo>
      <delete includeemptydirs="true" quiet="true">
         <fileset dir="${docsdir}" includes="**/*"></fileset>
      </delete>
   </target>

   <target name="generateDocs" description="Generates docs" depends="cleanDocs,identifyClasses">
       <!-- Get the current revision. -->
      <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="localClasspath" />
      <svn>
         <status path="." revisionProperty="svn.revision"/>
      </svn>
         
         
      <echo>Generating documentation for '${docsdir}'...</echo>
      <exec executable="${asdoc}" failonerror="true">
         <arg line="-source-path &quot;${classesdir}&quot;" />
         <arg line="-doc-classes ${path.classes}" />
         <arg line="-exclude-dependencies=true" />
         <arg line="-window-title '${windowtitle} - r${env.SVN_REVISION} (ZaaBot build #${env.BUILD_NUMBER})'" />
         <arg line="-main-title '${maintitle} - r${env.SVN_REVISION} (ZaaBot build #${env.BUILD_NUMBER})' " />
         <arg line="-footer '${footer}'" />
         <arg line="-output '${docsdir}'" />
      </exec>
   </target>

   <target name="checkSWCUpToDate" depends="ensureValidEnvironment">
      <uptodate property="isUpToDate" targetfile="${bindir}/PBEngine.swc">
         <srcfiles dir="${classesdir}">
            <include name="**/*.as"/>
            <include name="**/*.mxml"/>
         </srcfiles>
      </uptodate>
   </target>

   <target name="printUpToDate" depends="checkSWCUpToDate" if="isUpToDate">
      <echo>PBEngine.swc is up to date, skipping.</echo>
   </target>

   <target name="generateSWC" description="Generates PBEngine SWC." unless="isUpToDate" depends="populateBuildVersion,printUpToDate,identifyClasses">
      <echo>Generating PBEngine.SWC using '${classesdir}'</echo>
      <exec executable="${compc}" failonerror="true">
         <arg line="-source-path &quot;${classesdir}&quot;" />
         <arg line="-output &quot;${bindir}/PBEngine.swc&quot;" />
         <arg line="-include-classes ${path.classes}" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
         <arg line="-target-player=9.0.124" />
         <arg line="-debug=${DEBUG}"/>
      </exec>
   </target>
   
   <target name="lessons" depends="compile" description="Compile all the lessons.">
      <ant dir="${rootDir}/lessons/Lesson2Base"/>
      <ant dir="${rootDir}/lessons/Lesson2Final"/>
      <ant dir="${rootDir}/lessons/Lesson3Base"/>
      <ant dir="${rootDir}/lessons/Lesson3Final"/>
      <ant dir="${rootDir}/lessons/Lesson4Base"/>
      <ant dir="${rootDir}/lessons/Lesson4Final"/>
      <ant dir="${rootDir}/lessons/Lesson5Base"/>
      <ant dir="${rootDir}/lessons/Lesson5Final"/>
   </target>
   
   <target name="examples" depends="compile" description="Compile all the examples.">
      <ant dir="${rootDir}/examples/PBEngineDemo"/>
      <ant dir="${rootDir}/examples/PBFlexlessEngineDemo"/>
      <ant dir="${rootDir}/examples/RollyBallGame"/>
   </target>
   
   <target name="doLessonsPackagedBuild" description="Build a packaged ZIP of each lesson, ready for distribution." depends="clean,compile,lessons">
      <!-- Build everything from scratch - dependencies do this. -->
      
      <!-- Get the current revision. -->
      <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="localClasspath" />
      <svn>
         <status path="." revisionProperty="svn.revision"/>
      </svn>
      <echo>Packaging version ${svn.revision} of PBEngine SDK from repo</echo>
      
      <!-- Package it all into a zip into the docs directory. -->
      <delete  file="${rootDir}/docs/downloads/Lesson1FlashDevelop.zip" quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson1FlashDevelop.zip" basedir="${rootDir}/lessons/Lesson1FlashDevelop" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson1FlashCS4.zip"     quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson1FlashCS4.zip"     basedir="${rootDir}/lessons/Lesson1FlashCS4" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson1FlexBuilder.zip"  quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson1FlexBuilder.zip"  basedir="${rootDir}/lessons/Lesson1FlexBuilder" excludes="*svn*"/>

      <delete  file="${rootDir}/docs/downloads/Lesson2Base.zip"  quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson2Base.zip"  basedir="${rootDir}/lessons/Lesson2Base" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson2Final.zip" quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson2Final.zip" basedir="${rootDir}/lessons/Lesson2Final" excludes="*svn*"/>

      <delete  file="${rootDir}/docs/downloads/Lesson3Base.zip"  quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson3Base.zip"  basedir="${rootDir}/lessons/Lesson3Base" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson3Final.zip" quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson3Final.zip" basedir="${rootDir}/lessons/Lesson3Final" excludes="*svn*"/>

      <delete  file="${rootDir}/docs/downloads/Lesson4Base.zip"  quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson4Base.zip"  basedir="${rootDir}/lessons/Lesson4Base" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson4Final.zip" quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson4Final.zip" basedir="${rootDir}/lessons/Lesson4Final" excludes="*svn*"/>

      <delete  file="${rootDir}/docs/downloads/Lesson5Base.zip"  quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson5Base.zip"  basedir="${rootDir}/lessons/Lesson5Base" excludes="*svn*"/>
      <delete  file="${rootDir}/docs/downloads/Lesson5Final.zip" quiet="true"/>
      <zip destfile="${rootDir}/docs/downloads/Lesson5Final.zip" basedir="${rootDir}/lessons/Lesson5Final" excludes="*svn*"/>

      <!-- Copy final versions of the lessons to the docs directory -->
      <copy file="${rootDir}/lessons/Lesson2Final/bin/Lesson2Final.swf" tofile="${rootDir}/docs/downloads/Lesson2Final.swf" failOnError="true" overwrite="true" />
      <copy file="${rootDir}/lessons/Lesson3Final/bin/Lesson3Final.swf" tofile="${rootDir}/docs/downloads/Lesson3Final.swf" failOnError="true" overwrite="true" />
      <copy file="${rootDir}/lessons/Lesson4Final/bin/Lesson4Final.swf" tofile="${rootDir}/docs/downloads/Lesson4Final.swf" failOnError="true" overwrite="true" />
      <copy file="${rootDir}/lessons/Lesson5Final/bin/Lesson5Final.swf" tofile="${rootDir}/docs/downloads/Lesson5Final.swf" failOnError="true" overwrite="true" />
   </target>
   
   <target name="doFullPackagedBuild" description="Build a packaged ZIP of the whole SDK, ready for distribution." depends="clean,test,compile,doLessonsPackagedBuild,examples">
      <!-- Build everything from scratch - dependencies do this. -->
      
      <!-- Get the current revision. -->
      <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="localClasspath" />
      <svn>
         <status path="." revisionProperty="svn.revision"/>
      </svn>
      <echo>Packaging version ${svn.revision} of PBEngine SDK from repo</echo>
      
      <!-- Package it all into a zip with appropriate name. -->
      <delete file="${rootDir}/PushButtonEngine-r${svn.revision}.zip" quiet="true"/>
      <zip destfile="${rootDir}/PushButtonEngine-r${svn.revision}.zip" basedir="${rootDir}" excludes="*svn*,PushButtonEngine-r*.zip,build.properties,build/testrun*,builds/*,builds"/>
   </target>
   
   <target name="buildSWF" description="Build a SWF for a project given a few properties. Used by per-project Ant files." depends="generateSWC">
      <!--
         We expect a few properties.
         
         currentProject.rootDir - root directory (like examples/PBEngineDemo).
         currentProject.name    - name of current project.
         currentProject.rootFile - .as or .mxml file that is entry point.
      -->
      <echo>Building ${currentProjectName} in ${currentProjectRootDir} from ${currentProjectRootFile}</echo>
      <exec executable="${mxmlc}" failonerror="true">
         <arg line="-source-path+=&quot;${currentProjectRootDir}/src&quot; " />
         <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed" />
         <arg line="-compiler.optimize=true -use-network=false" />
         <arg line="-output &quot;${currentProjectRootDir}/bin/${currentProjectName}.swf&quot;" />
         <arg line="&quot;${currentProjectRootDir}/src/${currentProjectRootFile}&quot;" />
         <arg line="-debug=${DEBUG}"/>
      </exec>
   </target>

   <target name="test" description="Builds and runs the unit tests defined in the test directory." depends="generateSWC">
      <condition property="airVersionIsSet">
         <isset property="airversion"/>
      </condition>
      <fail unless="airVersionIsSet">
         The airversion property is not set in the build.properties file.
         
         Set it to the AIR version you'd put in your application descriptor file.
         
         See the build.template.properties file for more information.
      </fail>
      <!-- 
           TODO: No need to build this every time if it's up to date, 
           and we need to do validity checking to make sure the environment is correct 
       -->
     
      <!-- Build the tests as an AIR app. -->
      <mkdir dir="${testRunDir}"></mkdir>
      <exec executable="${mxmlc}" failonerror="true">
         <arg line="-source-path+=&quot;${testsdir}/src&quot; " />
         <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
         <arg line="-library-path+=&quot;${testsdir}/libs&quot;" />
         <arg line="+configname=air" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
         <arg line="-compiler.optimize=true -use-network=false" />
         <arg line="-output &quot;${testRunDir}/pbetests.swf&quot;" />
         <arg line="&quot;${testsdir}/src/TestRunner.mxml&quot;" />
         <arg line="-debug=${DEBUG}"/>
      </exec>

      <echo />
      <echo />
   	  <echo>Tests located at "${testRunDir}/pbetests.swf"</echo>
      <echo />

      <!-- Copy our application template and include the path to the swf file and any other settings -->
      <copy file="${buildFilesDir}/application.template.xml" tofile="${testRunDir}/application.xml" failOnError="true" overwrite="true" verbose="true">
         <filterset>
            <filter token="TESTSWF" value="pbetests.swf"/>
            <filter token="AIRVERSION" value="${airversion}"/>
         </filterset>
      </copy>

      <!-- Execute the AIR app which generates junit format xml files for each test suite. --> 
      <!-- This will fail after 30 seconds -->
      <exec executable="${adl}" failonerror="true" timeout="30000">
         <arg line="-nodebug"/>
         <arg line="&quot;${testRunDir}/application.xml&quot;"/>
         <arg line="--"/>
         <arg line="&quot;${testRunDir}/testoutput&quot;"/>
         <arg line="true"/>
      </exec>

   </target>

 </project>
